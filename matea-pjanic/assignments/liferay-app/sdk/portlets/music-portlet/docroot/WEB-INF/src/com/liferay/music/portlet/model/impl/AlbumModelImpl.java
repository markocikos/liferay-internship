/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.music.portlet.model.impl;

import com.liferay.music.portlet.model.Album;
import com.liferay.music.portlet.model.AlbumModel;
import com.liferay.music.portlet.model.AlbumSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Album service. Represents a row in the &quot;Music_Album&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.music.portlet.model.AlbumModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AlbumImpl}.
 * </p>
 *
 * @author Matea Pjanic
 * @see AlbumImpl
 * @see com.liferay.music.portlet.model.Album
 * @see com.liferay.music.portlet.model.AlbumModel
 * @generated
 */
@JSON(strict = true)
public class AlbumModelImpl extends BaseModelImpl<Album> implements AlbumModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a album model instance should use the {@link com.liferay.music.portlet.model.Album} interface instead.
	 */
	public static final String TABLE_NAME = "Music_Album";
	public static final Object[][] TABLE_COLUMNS = {
			{ "albumId", Types.BIGINT },
			{ "bendId", Types.BIGINT },
			{ "image", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "year", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Music_Album (albumId LONG not null primary key,bendId LONG,image VARCHAR(75) null,name VARCHAR(75) null,year INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Music_Album";
	public static final String ORDER_BY_JPQL = " ORDER BY album.albumId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Music_Album.albumId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.music.portlet.model.Album"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.music.portlet.model.Album"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.music.portlet.model.Album"),
			true);
	public static long BENDID_COLUMN_BITMASK = 1L;
	public static long ALBUMID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Album toModel(AlbumSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Album model = new AlbumImpl();

		model.setAlbumId(soapModel.getAlbumId());
		model.setBendId(soapModel.getBendId());
		model.setImage(soapModel.getImage());
		model.setName(soapModel.getName());
		model.setYear(soapModel.getYear());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Album> toModels(AlbumSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Album> models = new ArrayList<Album>(soapModels.length);

		for (AlbumSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.music.portlet.model.Album"));

	public AlbumModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _albumId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAlbumId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _albumId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Album.class;
	}

	@Override
	public String getModelClassName() {
		return Album.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("albumId", getAlbumId());
		attributes.put("bendId", getBendId());
		attributes.put("image", getImage());
		attributes.put("name", getName());
		attributes.put("year", getYear());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long albumId = (Long)attributes.get("albumId");

		if (albumId != null) {
			setAlbumId(albumId);
		}

		Long bendId = (Long)attributes.get("bendId");

		if (bendId != null) {
			setBendId(bendId);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}
	}

	@JSON
	@Override
	public long getAlbumId() {
		return _albumId;
	}

	@Override
	public void setAlbumId(long albumId) {
		_albumId = albumId;
	}

	@JSON
	@Override
	public long getBendId() {
		return _bendId;
	}

	@Override
	public void setBendId(long bendId) {
		_columnBitmask |= BENDID_COLUMN_BITMASK;

		if (!_setOriginalBendId) {
			_setOriginalBendId = true;

			_originalBendId = _bendId;
		}

		_bendId = bendId;
	}

	public long getOriginalBendId() {
		return _originalBendId;
	}

	@JSON
	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_year = year;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Album.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Album toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Album)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AlbumImpl albumImpl = new AlbumImpl();

		albumImpl.setAlbumId(getAlbumId());
		albumImpl.setBendId(getBendId());
		albumImpl.setImage(getImage());
		albumImpl.setName(getName());
		albumImpl.setYear(getYear());

		albumImpl.resetOriginalValues();

		return albumImpl;
	}

	@Override
	public int compareTo(Album album) {
		long primaryKey = album.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Album)) {
			return false;
		}

		Album album = (Album)obj;

		long primaryKey = album.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AlbumModelImpl albumModelImpl = this;

		albumModelImpl._originalBendId = albumModelImpl._bendId;

		albumModelImpl._setOriginalBendId = false;

		albumModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Album> toCacheModel() {
		AlbumCacheModel albumCacheModel = new AlbumCacheModel();

		albumCacheModel.albumId = getAlbumId();

		albumCacheModel.bendId = getBendId();

		albumCacheModel.image = getImage();

		String image = albumCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			albumCacheModel.image = null;
		}

		albumCacheModel.name = getName();

		String name = albumCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			albumCacheModel.name = null;
		}

		albumCacheModel.year = getYear();

		return albumCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{albumId=");
		sb.append(getAlbumId());
		sb.append(", bendId=");
		sb.append(getBendId());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", year=");
		sb.append(getYear());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.music.portlet.model.Album");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>albumId</column-name><column-value><![CDATA[");
		sb.append(getAlbumId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bendId</column-name><column-value><![CDATA[");
		sb.append(getBendId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Album.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Album.class };
	private long _albumId;
	private long _bendId;
	private long _originalBendId;
	private boolean _setOriginalBendId;
	private String _image;
	private String _name;
	private int _year;
	private long _columnBitmask;
	private Album _escapedModel;
}